name: endf
on:
  push:
  pull_request:
  schedule:
    - cron: '30 9 * * 3'  # 9:30 every Wed

# Validate ncmat2endf with both njoy and openmc by preparing the environment and
# then launching devel/ci/endf.x

jobs:
  ncdevtool_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Pip install packages for ncdevtool
        run: pip install -r ./src/devel/reqs/requirements_devel.txt
      - name: ncdevtool checks
        run: ./src/devel/bin/ncdevtool check -n "fix""me"

  build:
    needs: [ ncdevtool_check ]
    strategy:
      matrix:
        include:
          #Openmc has no macos arm packages yet (May 2025), and neither openmc
          #nor njoy supports windows:
          - { os: ubuntu-latest } #intel
          - { os: macos-13 } #intel
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    env:
      CONDA_SOLVER: libmamba

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./src

      - name: Checkout test data
        uses: actions/checkout@v4
        with:
          repository: mctools/ncrystal-testdata-openmc
          path: ./src_data

      - name: Prepare conda yml
        shell: python
        run: |
          from textwrap import dedent
          import pathlib
          pathlib.Path('theenv.yml').write_text(dedent(
          """
          name: theenv
          channels:
            - nodefaults
            - conda-forge
          dependencies:
            - python
            - pip
            - c-compiler
            - cxx-compiler
            - njoy2016 >=2016.78
            - openmc >=0.15.2
            - endf-parserpy >=0.12.0
            - numpy
            - cmake
            - make
          """
          ))

      - name: Set up conda env
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: theenv
          environment-file: ./theenv.yml
          auto-activate-base: false

      - name: Enable parallel cmake
        run: python ./src/devel/bin/ncdevtool nprocs --enable-github-parallel

      - name: Inspect environment
        run: |
          conda info
          conda list
          ncrystal-config -s
          nctool --test

      #Remove NCrystal conda packages dragged in by OpenMC:
      - run: conda remove --force ncrystal ncrystal-core ncrystal-python ncrystal-lib

      - name: Inspect environment again
        run: |
          conda info
          conda list
          which ncrystal-config || echo no-ncrystal-found

      #Install NCrystal and quickly verify we have all the pieces:
      - run: pip install ./src/ncrystal_python
      - run: pip install ./src/ncrystal_core
      - run: pip install ./src/ncrystal_verify
      - run: ncrystal-verify -m all -f '*common*,*basic*,*vdos*'
      - run: openmc --help
      - run: openmc --version
      - run: python3 -c 'import openmc'
      - run: which njoy

      - name: Prepare OpenMc data
        run: python3 ./src_data/prepare_data.py

      - name: View generated OpenMC cross_sections.xml
        run: cat ./src_data/cross_sections.xml

      - name: Set OPENMC_CROSS_SECTIONS
        run: echo "OPENMC_CROSS_SECTIONS=$PWD/src_data/cross_sections.xml" >> $GITHUB_ENV

      #Invoke the actual test in an empty directory:
      - run: mkdir run

      - name: Run devel/ci/endf_sim.py test script
        working-directory: run
        run: python3 ../src/devel/ci/endf_sim.py
