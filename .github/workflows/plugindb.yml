name: plugindb

on:
  push:
  pull_request:
  schedule:
    - cron: '10 15 * * 4'  # 10:15 every Friday

jobs:

  preparations:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        path: src

    - name: Install ncdevtool reqs
      run: pip install -r ./src/devel/reqs/requirements_devel.txt

    - name: ncdevtool checks
      run: ./src/devel/bin/ncdevtool check -n "fix""me"

    - name: Generate plugin list
      id: generate-plugin-list
      run: echo "pluginlist=$(./src/devel/bin/ncdevtool plugindb --mode=listjson)" >> $GITHUB_OUTPUT

    outputs:
      pluginlist: ${{ steps.generate-plugin-list.outputs.pluginlist }}
      platforms: '[ "ubuntu-latest", "macos-latest", "windows-latest","ubuntu-24.04-arm", "macos-13" ]'

  build_ncrystal:
    needs: [ preparations ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}

    name: Build NCrystal @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Enable parallel cmake
      run: python ./src/devel/bin/ncdevtool nprocs --enable-github-parallel

    - name: Build ncrystal-core
      run: pipx run build ./src/ncrystal_core --wheel --outdir ./dist

    - name: Build ncrystal-python
      run: pipx run build ./src/ncrystal_python --wheel --outdir ./dist

    - name: Build ncrystal-metapkg
      run: pipx run build ./src/ncrystal_metapkg --wheel --outdir ./dist

    - name: Build ncrystal-pypluginmgr
      run: pipx run build ./src/ncrystal_pypluginmgr --wheel --outdir ./dist

    - name: upload ncrystal wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-ncrystal-${{ matrix.os }}
        path: ./dist/*.whl
        if-no-files-found: error

    - name: Install numpy
      run: pip install numpy

    - name: Install ncrystal
      run: pip install --no-index --find-links dist ncrystal

    - name: Pip check
      run: pip check

    - name: Test ncrystal
      run: nctool --test

    - name: Install ncrystal-verify
      run: pip install "./src/ncrystal_verify[all]"

    - name: Pip check
      run: pip check

    - name: Launch ncrystal-verify
      run: ncrystal-verify

  checkplugin:
    needs: [ preparations, build_ncrystal ]

    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.preparations.outputs.pluginlist) }}
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}

    name: ${{ matrix.plugin }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Check python version
      run: python --version


    - name: Create pip constraints
      #Make sure that no other version of NCrystal might get dragged in:
      shell: python
      run: |
        from pathlib import Path
        v = Path('./src/VERSION').read_text().strip()
        c = [
        f'ncrystal=={v}',
        f'ncrystal-core=={v}',
        f'ncrystal-python=={v}',
        f'ncrystal-verify=={v}',
        ''
        ]
        v = Path('./constraints.txt').write_text('\n'.join(c))

    - name: Enable parallel cmake
      run: python ./src/devel/bin/ncdevtool nprocs --enable-github-parallel

    - name: Pip install pyyaml for ncdevtool
      run: pip install -c "constraints.txt" pyyaml

    #We want to make sure that the plugin code ends up in ./src_plugin, no matter if it is:
    #  1) A remote repo with the plugin at the root
    #  2) A remote repo with the plugin in some subdir
    #  3) A subdir of the already checkout out ncrystal repo itself

    - name: Extract plugin info
      id: pluginfo
      shell: python
      run: |
        import subprocess
        import os
        import sys
        import pathlib
        plugin_name = "${{ matrix.plugin }}"
        GITHUB_OUTPUT = pathlib.Path(os.environ['GITHUB_OUTPUT'])
        ncdevtool = pathlib.Path('.').absolute().joinpath('src','devel','bin','ncdevtool')
        out = {}
        for var in ['github_repo_key','repo_subdir','gitref','disable_tests','is_on_pypi']:
            rv=subprocess.run([sys.executable,str(ncdevtool),'plugindb','-e',plugin_name,var],check=True,capture_output=True)
            out[var]=rv.stdout.decode().strip()
        if out["github_repo_key"] == 'mctools/ncrystal':
            assert out["repo_subdir"]
            out['mode'] = 'ncrystalrepo'
        else:
          if out["repo_subdir"]:
              out['mode'] = 'otherreposubdir'
          else:
              out['mode'] = 'otherreporoot'

        for k,v in sorted(out.items()):
            print(f'Setting {k}="{v}"')
            with GITHUB_OUTPUT.open('at') as fh:
                fh.write(f'{k}={v}\n')

    - name: Checkout plugin repo as src_plugin
      if: steps.pluginfo.outputs.mode == 'otherreporoot'
      uses: actions/checkout@v5
      with:
        path: src_plugin
        repository: ${{ steps.pluginfo.outputs.github_repo_key }}
        ref: ${{ steps.pluginfo.outputs.gitref }}

    - name: Checkout plugin repo as src_plugin_reporoot
      if: steps.pluginfo.outputs.mode == 'otherreposubdir'
      uses: actions/checkout@v5
      with:
        path: src_plugin_reporoot
        repository: ${{ steps.pluginfo.outputs.github_repo_key }}
        ref: ${{ steps.pluginfo.outputs.gitref }}

    - name: Copy src_plugin_reporoot subdir to src_plugin
      if: steps.pluginfo.outputs.mode == 'otherreposubdir'
      shell: python
      run: |
        import shutil
        repo_subdir = "${{ steps.pluginfo.outputs.repo_subdir }}"
        shutil.copytree(f"./src_plugin_reporoot/{repo_subdir}/","./src_plugin")

    - name: Copy ncrystal repo subdir to src_plugin
      if: steps.pluginfo.outputs.mode == 'ncrystalrepo'
      shell: python
      run: |
        import shutil
        repo_subdir = "${{ steps.pluginfo.outputs.repo_subdir }}"
        shutil.copytree(f"./src/{repo_subdir}/","./src_plugin")

    #Done with preparing ./src_plugin.

    - name: Look in ./src_plugin
      shell: python
      run: |
        import pathlib
        d = pathlib.Path('.').joinpath('src_plugin')
        print('Contents of ./src_plugin:')
        for f in sorted(pathlib.Path('.').joinpath('src_plugin').iterdir()):
          print(' ',f)
        if not d.joinpath('pyproject.toml').is_file():
            raise SystemExit("Error: ./src_plugin/pyproject.toml not found!")

    - name: download ncrystal wheels
      uses: actions/download-artifact@v5
      with:
        name: wheels-ncrystal-${{ matrix.os }}
        path: ./dist

    - name: Install numpy and build backends
      run: pip install -c "constraints.txt" numpy "setuptools>=64.0" "scikit-build-core>=0.10"
      #                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      #NB: This covers all known plugins. If it will differ, we might want to
      #    simply parse the pyproject toml instead and extract them dynamically:

    - name: Install ncrystal
      run: pip install -c "constraints.txt" --no-index --find-links dist ncrystal ncrystal-pypluginmgr

    - name: Pip check
      run: pip check

    - name: Test ncrystal
      run: nctool --test

    - name: Pip list
      run: pip list

      #Note: we do not add --no-index or --no-deps here, since we want to allow
      #the plugin to use whatever plugin backend it desires.
    - name: Install plugin
      run: pip install -c "constraints.txt" ./src_plugin --no-build-isolation

    - name: Pip list
      run: pip list

    - name: Pip check
      run: pip check

    - name: Verify plugin package has expected name
      run: pip show "ncrystal-plugin-${{ matrix.plugin }}"

    - name: Pip list
      run: pip list

    - name: Test plugin
      if: steps.pluginfo.outputs.disable_tests == ''
      run: ncrystal-pluginmanager --test "${{ matrix.plugin }}"

    - name: Uninstall plugin
      run: pip uninstall -y "ncrystal-plugin-${{ matrix.plugin }}"

    - name: Pip list
      run: pip list

    - name: Pip check
      run: pip check

    - name: Install plugin from PyPI
      if: steps.pluginfo.outputs.is_on_pypi != ''
      run: pip install -c "constraints.txt" "ncrystal-plugin-${{ matrix.plugin }}" --no-build-isolation

    - name: Pip list
      run: pip list

    - name: Pip check
      run: pip check

    - name: Test PyPI plugin
      if: steps.pluginfo.outputs.is_on_pypi != '' && steps.pluginfo.outputs.disable_tests == ''
      run: ncrystal-pluginmanager --test "${{ matrix.plugin }}"

  build_virtapi_app:
    needs: [ preparations ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}

    name: Build virtapi app @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        path: src

    - name: Cfg app
      run: cmake "-DCMAKE_INSTALL_PREFIX=virtapiapp" "-DCMAKE_BIN_DIR=bin" -S ./src/examples/virtualapi_project -B ./build_virtapiapp

    - name: Build and install virtapi-app
      run: cmake --build ./build_virtapiapp --config Release

    - name: Install virtapi-app
      run: cmake --install ./build_virtapiapp --config Release

    - name: Look around
      if: runner.os == 'Windows'
      run: tree /F ./virtapiapp

    - uses: actions/upload-artifact@v4
      with:
        name: virtapi-app-${{ matrix.os }}
        path: ./virtapiapp/bin/ncrystal-virtapi-example*
        if-no-files-found: error

  launch_virtapi_app:
    needs: [ preparations, build_virtapi_app, build_ncrystal ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}

    name: Launch virtapi app @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: download virtapi app
      uses: actions/download-artifact@v5
      with:
        name: virtapi-app-${{ matrix.os }}
        path: ./app

    - name: download ncrystal wheels
      uses: actions/download-artifact@v5
      with:
        name: wheels-ncrystal-${{ matrix.os }}
        path: ./dist

    - name: Install numpy
      run: pip install "numpy>=1.22"

    - name: Install ncrystal
      run: pip install --no-index --find-links dist ncrystal

    - name: Look around
      if: runner.os != 'Windows'
      run: ls -l ./app/ncrystal-virtapi-example

    - name: Fix permissions
      if: runner.os != 'Windows'
      run: chmod +x ./app/ncrystal-virtapi-example

    - name: Launch app
      run: ./app/ncrystal-virtapi-example

    - name: Launch app and check output
      shell: python
      run: |
        import pathlib
        import subprocess
        ref = [
          'xs(0.5 Aa) = 1.39174',
          'xs(1 Aa) = 1.3667',
          'xs(1.5 Aa) = 1.36907',
          'xs(2 Aa) = 1.28003',
          'xs(2.5 Aa) = 1.08039',
          'xs(3 Aa) = 1.02154',
          'xs(3.5 Aa) = 1.357',
          'xs(4 Aa) = 1.74758',
          'xs(4.5 Aa) = 1.36864',
          'xs(5 Aa) = 0.0812656',
          'xs(5.5 Aa) = 0.0839121',
          'xs(6 Aa) = 0.0870308',
        ]
        cmd = list(pathlib.Path('.').joinpath('app').glob('ncrystal-virtapi-example*'))[0]
        assert cmd.is_file()
        rv = subprocess.run(cmd,capture_output=True,check=True)
        assert rv.returncode==0 and not rv.stderr
        output=list(e.strip() for e in rv.stdout.decode('utf8').splitlines() if e.strip())
        ok = True
        for i,actual in enumerate(output):
          expect = ref[i] if i < len(ref) else None
          if expect is not None and actual == expect:
            print('Output line matches expectations: %s'%output[i])
          else:
            ok = False
            print('Output line mismatch!')
            print('  Expected: %s'%expect)
            print('  Got     : %s'%actual)
        if len(output) != len(ref):
          print('ERROR: Got %s lines of output, expected %i'%(len(output),len(ref)))
        if not ok:
          print("ERROR: Output does not match reference!")
          raise SystemExit(1)
