name: install

on:
  push:
  pull_request:
  schedule:
    - cron: '30 20 * * 0'  # 20:30 every Sunday

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest, python: '3.13', buildtype: 'Debug' }
          - { os: macos-latest, python: "3.10", buildtype: 'Release'  }

    name: ${{ matrix.os }}.python-${{ matrix.python }}.${{ matrix.buildtype }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}

    - name: Enable parallel cmake
      run: python ./src/devel/bin/ncdevtool nprocs --enable-github-parallel

    - name: Pip install dependencies
      run: python3 -m pip install -r ./src/devel/reqs/requirements_all_and_devel.txt

    - name: Configure CMake
      run: >
        cmake
        -S ./src
        -B ./build
        -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }}
        -DCMAKE_INSTALL_PREFIX=./install
        -DNCRYSTAL_ENABLE_EXAMPLES=ON
        -DNCRYSTAL_BUILD_STRICT=ON
        -DNCRYSTAL_ENABLE_TESTING=OFF
        -DMCTOOLS_REQUIRE_ALL_TEST_DEPS=ON

    - name: Build
      run: >
        cmake
        --build ./build
        --config ${{ matrix.buildtype }}

    - name: Install
      run: cmake --install ./build

    - name: Test installed
      env:
        NCRYSTAL_ONLINEDB_FORBID_NETWORK: 1
      run: |
        set -eux
        ./install/bin/ncrystal-config --summary
        echo "listing bindir"
        ls -l ./install/bin
        echo "listing bindir done"
        #Expose ncrystal-config and examples:
        export PATH="./install/bin:${PATH:-}"
        #Add python modules and cmdline scripts:
        pip install ./src/ncrystal_python
        ncrystal-config --summary
        nctool --test
        ncrystal-config --help
        ncrystal_example_c
        ncrystal_example_cpp
        python3 ./src/examples/ncrystal_example_py
        nctool --help
        nctool --dump 'Al_sg225.ncmat;dcutoff=1.5'
        python3 -c 'import NCrystal; NCrystal.test()'
        ncrystal_vdos2ncmat --help
        ncrystal_cif2ncmat --help
        ncrystal_ncmat2cpp --help
        python3 -m NCrystal ncmat2cpp --help
        python3 -m NCrystal nctool --test
        python3 -m NCrystal config -s
        ncrystal_hfg2ncmat --help
        ncrystal_verifyatompos --help
        export NCRYSTAL_ONLINEDB_CACHEDIR="$PWD/codidcache"
        mkdir -p "${NCRYSTAL_ONLINEDB_CACHEDIR}"
        cp ./src/tests/data/fake_cod_9005777.cif "${NCRYSTAL_ONLINEDB_CACHEDIR}/cod_9005777.cif"
        ncrystal_cif2ncmat codid::9005777
        ncrystal_ncmat2hkl --help
        ncrystal_ncmat2hkl --format=laz 'Al_sg225.ncmat;temp=250K;dcutoff=0.75' -o test_Al.laz
        ncrystal_ncmat2hkl --format=lau 'Al_sg225.ncmat;temp=250K;dcutoff=0.75' -o test_Al.lau
        nctool -d ./test_Al.laz
        nctool -d ./test_Al.lau
        ncrystal_ncmat2cpp stdlib::Al_sg225.ncmat -o test.cpp
        cat test.cpp
        nctool --pdf Al_sg225.ncmat
        #Examples from README:
        cp ./src/examples/ncrystal_example_cpp.cc ./my_cpp_code.cpp
        cp ./src/examples/ncrystal_example_c.c ./my_c_code.c

        test -f $(ncrystal-config --show libpath)
        test -d $(ncrystal-config --show libdir)

        #NOTE: Important that build flags comes AFTER the code being
        #compiled. Otherwise ncrystal symbols will be initially ignored, leading
        #to errors later:
        cc -std=c11 my_c_code.c $(ncrystal-config --show buildflags) -o my_c_app
        ./my_c_app
        c++ -std=c++17 my_cpp_code.cpp $(ncrystal-config --show buildflags) -o my_cpp_app
        ./my_cpp_app
        echo "Custom compilation of downstream C/C++ code succeeded"
