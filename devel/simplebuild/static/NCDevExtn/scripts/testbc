#!/usr/bin/env python3

################################################################################
##                                                                            ##
##  This file is part of NCrystal (see https://mctools.github.io/ncrystal/)   ##
##                                                                            ##
##  Copyright 2015-2025 NCrystal developers                                   ##
##                                                                            ##
##  Licensed under the Apache License, Version 2.0 (the "License");           ##
##  you may not use this file except in compliance with the License.          ##
##  You may obtain a copy of the License at                                   ##
##                                                                            ##
##      http://www.apache.org/licenses/LICENSE-2.0                            ##
##                                                                            ##
##  Unless required by applicable law or agreed to in writing, software       ##
##  distributed under the License is distributed on an "AS IS" BASIS,         ##
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ##
##  See the License for the specific language governing permissions and       ##
##  limitations under the License.                                            ##
##                                                                            ##
################################################################################

from NCDevExtn.bcyp import f_of_eta

def test_f_of_eta():
    #Reference values via sagemath (fixme: add to unit test, but also add more
    #digits!):
    f_of_eta_refvals = [
        ( 1.00000000000000e-20, 1.00000000000000 ),
        ( 1.00000000000000e-19, 1.00000000000000 ),
        ( 1.00000000000000e-18, 1.00000000000000 ),
        ( 1.00000000000000e-17, 1.00000000000000 ),
        ( 1.00000000000000e-16, 1.00000000000000 ),
        ( 1.00000000000000e-15, 1.00000000000000 ),
        ( 1.00000000000000e-14, 1.00000000000000 ),
        ( 1.00000000000000e-13, 1.00000000000000 ),
        ( 1.00000000000000e-12, 1.00000000000000 ),
        ( 1.00000000000000e-11, 1.00000000000000 ),
        ( 1.00000000000000e-10, 1.00000000000000 ),
        ( 1.00000000000000e-9, 1.00000000000000 ),
        ( 1.00000000000000e-8, 1.00000000000000 ),
        ( 1.00000000000000e-7, 0.999999999999998 ),
        ( 1.00000000000000e-6, 0.999999999999778 ),
        ( 0.0000100000000000000, 0.999999999977778 ),
        ( 0.000100000000000000, 0.999999997777778 ),
        ( 0.00100000000000000, 0.999999777777800 ),
        ( 0.0100000000000000, 0.999977777999999 ),
        ( 0.100000000000000, 0.997779998730629 ),
        ( 1.00000000000000, 0.798775991447889 ),
        ( 10.0000000000000, 0.00911665064618170 ),
        ( 100.000000000000, 0.000100875861358839 ),
        ( 1000.00000000000, 9.99070644225359e-7 ),
        ( 10000.0000000000, 9.99941802457802e-9 ),
        ( 100000.000000000, 1.00000071451908e-10 ),
        ( 1.00000000000000e6, 1.00000065571444e-12 ),
        ( 1.00000000000000e7, 1.00000007631011e-14 ),
        ( 1.00000000000000e8, 1.00000000677087e-16 ),
        ( 1.00000000000000e9, 9.99999999085290e-19 ),
        ( 1.00000000000000e10, 1.00000000008513e-20 ),
        ( 1.00000000000000e11, 9.99999999993112e-23 ),
        ( 1.00000000000000e12, 1.00000000000097e-24 ),
        ( 1.00000000000000e13, 1.00000000000006e-26 ),
        ( 1.00000000000000e14, 9.99999999999996e-29 ),
        ( 1.00000000000000e15, 1.00000000000000e-30 ),
        ( 1.00000000000000e16, 1.00000000000000e-32 ),
        ( 1.00000000000000e17, 1.00000000000000e-34 ),
        ( 1.00000000000000e18, 1.00000000000000e-36 ),
        ( 1.00000000000000e19, 1.00000000000000e-38 ),
        ( 1.00000000000000e20, 1.00000000000000e-40 )
    ]
    for eta, ref in f_of_eta_refvals:
        v = f_of_eta(eta)
        print(type(v))
        d = abs(v-ref)/ref
        print( eta, ref, v, d )
        assert 0.0 <= d < 1e-14

def main():
    test_f_of_eta()
