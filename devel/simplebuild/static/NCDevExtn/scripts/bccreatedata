#!/usr/bin/env python3

################################################################################
##                                                                            ##
##  This file is part of NCrystal (see https://mctools.github.io/ncrystal/)   ##
##                                                                            ##
##  Copyright 2015-2025 NCrystal developers                                   ##
##                                                                            ##
##  Licensed under the Apache License, Version 2.0 (the "License");           ##
##  you may not use this file except in compliance with the License.          ##
##  You may obtain a copy of the License at                                   ##
##                                                                            ##
##      http://www.apache.org/licenses/LICENSE-2.0                            ##
##                                                                            ##
##  Unless required by applicable law or agreed to in writing, software       ##
##  distributed under the License is distributed on an "AS IS" BASIS,         ##
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ##
##  See the License for the specific language governing permissions and       ##
##  limitations under the License.                                            ##
##                                                                            ##
################################################################################

from NCDevExtn.bcyp import BCYPCalc
import multiprocessing
import numpy
import tqdm
import json
import pathlib

def worker( args ):
    theta_deg, xval = args
    calc = BCYPCalc( theta_deg )
    return ( float(theta_deg), float(xval), float(calc.calc_yp(xval)) )

def main():
    output='bcdata.json'
    assert not pathlib.Path(output).exists()

    theta_vals = numpy.linspace(0.0, 90.0, 181)
    xvals = numpy.geomspace( 1e-3, 1e5, 101 )

    worklist = []
    for th in theta_vals:
        for x in xvals:
            worklist.append( (th, x) )
    with multiprocessing.Pool() as pool:
        results = list(tqdm.tqdm( pool.imap(worker, worklist),
                                 total=len(worklist)))

    r = {}
    for th, x, yp in sorted(results):
        if th not in r:
            r[th] = []
        r[th].append( float(yp) )
    final = { 'xvals' : [float(x) for x in xvals],
              'theta_2_ypvals' : r }
    with pathlib.Path(output).open('wt') as fh:
        json.dump(final, fh, sort_keys=True)
    print(f"Wrote {output}")

    #import pprint
    #pprint.pprint(final)

if __name__=='__main__':
    main()
