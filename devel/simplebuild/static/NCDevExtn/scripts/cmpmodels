#!/usr/bin/env python3

################################################################################
##                                                                            ##
##  This file is part of NCrystal (see https://mctools.github.io/ncrystal/)   ##
##                                                                            ##
##  Copyright 2015-2025 NCrystal developers                                   ##
##                                                                            ##
##  Licensed under the Apache License, Version 2.0 (the "License");           ##
##  you may not use this file except in compliance with the License.          ##
##  You may obtain a copy of the License at                                   ##
##                                                                            ##
##      http://www.apache.org/licenses/LICENSE-2.0                            ##
##                                                                            ##
##  Unless required by applicable law or agreed to in writing, software       ##
##  distributed under the License is distributed on an "AS IS" BASIS,         ##
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  ##
##  See the License for the specific language governing permissions and       ##
##  limitations under the License.                                            ##
##                                                                            ##
################################################################################

import matplotlib.pyplot as plt
import numpy as np
import NCrystalDev as NC

def load( ncmod, ncmatdata, cfg_params ):
    return ncmod.directLoad(ncmatdata,
                            dtype='ncmat',
                            cfg_params=cfg_params,
                            doAbsorption=False)


def test( ncmatkey, *, dcutoff, extncfg ):
    extra_cfg = f'dcutoff={dcutoff};comp=bragg'
    # Model option 0:
    #    format (single line): "Sabine_uncorr {l} {Gg} {L} {tilt_option=rect|tri}".
    #    => res_option = 0
    #    note: rect is the sabine El/Eb from 6.4.9.2, Gg and L only matters for secondary extinction.
    #

    print(f"Testing extn={extncfg}")
    plugin_lines = [extncfg_2_plugincfg( extncfg )]
    print("Corresponding to plugin lines:")
    for pl in plugin_lines:
        print('  ',pl)
    mat_dev = load( NC,
                    create_data( ncmatkey ),
                    f'{extra_cfg};extn={extncfg}' )

    mat_ref = load( NCenv,
                    create_data( ncmatkey, plugin_lines = plugin_lines ),
                    extra_cfg )

    mat_noextn = load( NCenv,
                       create_data( ncmatkey ),
                       extra_cfg )

    #wls = np.linspace(3.9605,3.96052,200000)#fixme
    wls = np.linspace(0.0,6.0,20000)
    #wls = np.concatenate( (wls, np.linspace(2.14,2.142,10000)), axis=0 )
    wls.sort()
    plt.plot(wls,mat_dev.xsect(wl=wls),label='NCrystal (devel)')
    plt.plot(wls,mat_ref.xsect(wl=wls),label='CrysExtn plugin',ls=':',
             lw=4,color='red',alpha=0.5)
    plt.plot(wls,mat_noextn.xsect(wl=wls),label='no extinction',ls=':',
             lw=4,color='orange',alpha=0.5)

    plt.xlabel('\u00C5')
    plt.legend()
    plt.grid()
    plt.show()


def main():
    cfg = '10mu'
    import sys
    args = sys.argv[1:]
    if args:
        assert len(args)==1
        cfg = args[0]
    extncfg_2_plugincfg(cfg)
#ncdevtool sbrun python3 -c 'import NCrystalDev as n; print(n.decodeCfg("Al_sg225.ncmat;extn=10mu/100mu/1deg")["pars"])'




    test( 'stdlib::Be_sg194.ncmat',
          #dcutoff=0.05,
          dcutoff = 1.9,
          extncfg = cfg
         )

if __name__=='__main__':
    main()


g = 1/(2*sigma*sqrt(pi))
FWHM = sqrt(8ln(2))*sigma

g^-1 = 2*sqrt(pi)/sqrt(8ln2())*FWHM = sqrt( pi / (2ln2) )*FWHM
g = sqrt( (2ln2) / pi ) / FWHM
